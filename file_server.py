#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Å —Ñ–∞–π–ª–æ–≤—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
–õ–æ–∫–∞–ª—å–Ω—ã–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±–º–µ–Ω–∞ —Ñ–∞–π–ª–∞–º–∏
"""

import http.server
import socketserver
import os
import urllib.parse
from pathlib import Path

class FileServerHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GET –∑–∞–ø—Ä–æ—Å—ã"""
        if self.path == '/':
            self.send_file_list()
        elif self.path.startswith('/download/'):
            self.download_file()
        else:
            super().do_GET()
    
    def do_POST(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST –∑–∞–ø—Ä–æ—Å—ã (–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤)"""
        if self.path == '/upload':
            self.upload_file()
        else:
            self.send_error(404)
    
    def send_file_list(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–∞–π–ª–∞–º–∏"""
        current_dir = Path(os.getcwd())
        files = []
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        for item in current_dir.iterdir():
            if item.is_file():
                size = item.stat().st_size
                size_str = self.format_size(size)
                files.append({
                    'name': item.name,
                    'size': size_str,
                    'is_file': True
                })
            elif item.is_dir():
                files.append({
                    'name': item.name,
                    'size': '[DIR]',
                    'is_file': False
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –ø–∞–ø–∫–∏, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã
        files.sort(key=lambda x: (x['is_file'], x['name'].lower()))
        
        # –°–æ–∑–¥–∞–µ–º HTML
        html = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>–§–∞–π–ª–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä</title>
            <meta charset="utf-8">
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                h1 { color: #333; }
                table { border-collapse: collapse; width: 100%; }
                th, td { padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }
                th { background-color: #f2f2f2; }
                .dir { color: #0066cc; font-weight: bold; }
                .file { color: #333; }
                .size { color: #666; font-size: 0.9em; }
                .upload-form { margin: 20px 0; padding: 20px; background: #f9f9f9; border-radius: 5px; }
            </style>
        </head>
        <body>
            <h1>üìÅ –§–∞–π–ª–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä</h1>
            <p>–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: <strong>{}</strong></p>
            
            <div class="upload-form">
                <h3>üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª</h3>
                <form method="post" action="/upload" enctype="multipart/form-data">
                    <input type="file" name="file" required>
                    <input type="submit" value="–ó–∞–≥—Ä—É–∑–∏—Ç—å">
                </form>
            </div>
            
            <table>
                <tr>
                    <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                    <th>–†–∞–∑–º–µ—Ä</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
        """.format(current_dir)
        
        for file_info in files:
            if file_info['is_file']:
                html += f"""
                <tr>
                    <td class="file">üìÑ {file_info['name']}</td>
                    <td class="size">{file_info['size']}</td>
                    <td><a href="/download/{urllib.parse.quote(file_info['name'])}">‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å</a></td>
                </tr>
                """
            else:
                html += f"""
                <tr>
                    <td class="dir">üìÅ {file_info['name']}</td>
                    <td class="size">{file_info['size']}</td>
                    <td>‚Äî</td>
                </tr>
                """
        
        html += """
            </table>
        </body>
        </html>
        """
        
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()
        self.wfile.write(html.encode('utf-8'))
    
    def download_file(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        filename = urllib.parse.unquote(self.path[10:])  # —É–±–∏—Ä–∞–µ–º '/download/'
        filepath = Path(filename)
        
        if filepath.exists() and filepath.is_file():
            self.send_response(200)
            self.send_header('Content-type', 'application/octet-stream')
            self.send_header('Content-Disposition', f'attachment; filename="{filename}"')
            self.end_headers()
            
            with open(filepath, 'rb') as f:
                self.wfile.write(f.read())
        else:
            self.send_error(404, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def upload_file(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞"""
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ multipart/form-data
            boundary = self.headers['Content-Type'].split('boundary=')[1].encode()
            parts = post_data.split(boundary)
            
            for part in parts:
                if b'filename=' in part:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                    header_section = part.split(b'\r\n\r\n')[0]
                    filename_start = header_section.find(b'filename="') + 10
                    filename_end = header_section.find(b'"', filename_start)
                    filename = header_section[filename_start:filename_end].decode('utf-8')
                    
                    if filename:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                        file_data = part.split(b'\r\n\r\n', 1)[1].rstrip(b'\r\n--')
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                        with open(filename, 'wb') as f:
                            f.write(file_data)
                        
                        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {filename}")
                        break
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            self.send_response(302)
            self.send_header('Location', '/')
            self.end_headers()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            self.send_error(500, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")
    
    def format_size(self, size_bytes):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞"""
        if size_bytes == 0:
            return "0 B"
        
        size_names = ["B", "KB", "MB", "GB"]
        i = 0
        while size_bytes >= 1024 and i < len(size_names) - 1:
            size_bytes /= 1024
            i += 1
        
        return f"{size_bytes:.1f} {size_names[i]}"

def start_server(port=8000, directory=None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–∞–π–ª–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä"""
    if directory:
        os.chdir(directory)
        print(f"üìÅ –†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {os.getcwd()}")
    
    handler = FileServerHandler
    
    try:
        with socketserver.TCPServer(("", port), handler) as httpd:
            print(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            print(f"üîó –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:{port}")
            print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
            httpd.serve_forever()
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except OSError as e:
        if e.errno == 48:  # Address already in use
            print(f"‚ùå –ü–æ—Ä—Ç {port} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

def main():
    print("=== –§–ê–ô–õ–û–í–´–ô –í–ï–ë-–°–ï–†–í–ï–† ===\n")
    
    try:
        port = int(input("–ü–æ—Ä—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8000): ") or "8000")
        directory = input("–†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è): ").strip()
        
        if directory and not os.path.exists(directory):
            print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {directory}")
            return
        
        start_server(port, directory if directory else None)
        
    except ValueError:
        print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
